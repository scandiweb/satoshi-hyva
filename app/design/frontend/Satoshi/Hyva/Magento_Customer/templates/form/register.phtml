<?php
declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\Customer\CreateAccountButton;
use Hyva\Theme\ViewModel\HeroiconsSolid;
use Hyva\Theme\ViewModel\ReCaptcha;
use Magento\Customer\Block\Form\Register;
use Magento\Framework\Escaper;

/** @var Register $block */
/** @var Escaper $escaper */
/** @var ReCaptcha $recaptcha */
/** @var CreateAccountButton $createAccountButtonViewModel */
/** @var ViewModelRegistry $viewModels */
/** @var HeroiconsSolid $heroicons */

$formId = 'account-create-form';
$recaptcha = $block->getData('viewModelRecaptcha');
$heroicons = $viewModels->require(HeroiconsSolid::class);
$createAccountButtonViewModel = $viewModels->require(CreateAccountButton::class);
$minimumPasswordLength = $block->getMinimumPasswordLength();
$passwordMinCharacterSets = $block->getRequiredCharacterClassesNumber();
$isAutocompleteEnabled = $block->getConfig('customer/password/autocomplete_on_storefront');
?>

<div class="container mx-auto flex h-full items-center px-5">
    <div class="mx-auto mb-16 w-[412px] max-w-full">
        <header class="flex items-center justify-between sm:text-center">
            <h2 class="mb-7 w-full text-2xl" tabindex="-1"><?= __('Create account') ?></h2>
        </header>
        <div class="flex items-center">
            <div class="w-full">
                <form id="<?= $escaper->escapeHtmlAttr($formId) ?>"
                      action="<?= $escaper->escapeUrl($block->getPostActionUrl()) ?>" method="post"
                      novalidate="novalidate" enctype="multipart/form-data" autocomplete="off"
                      x-data="Object.assign(hyva.formValidation($el), initForm())"
                      @submit.prevent="submitForm">
                    <?= $block->getBlockHtml('formkey'); ?>
                    <?= $block->getChildHtml('form_fields_before') ?>
                    <?= $recaptcha ? $recaptcha->getInputHtml(ReCaptcha::RECAPTCHA_FORM_ID_CUSTOMER_CREATE) : '' ?>

                    <div class="mt-3 flex flex-col">
                        <label for="first_name" class="sr-only tracking-widest">
                            <?= __('First name') ?>
                        </label>
                        <input
                            type="text"
                            name="firstname"
                            id="first_name"
                            placeholder="<?= __('First name') ?>"
                            class="h-[44px] w-full rounded-[--inputs-radius] border px-5 py-4 border-text-50 contrast-more:border-secondary-700 contrast-more:placeholder-secondary-700"
                            :class="{ 'border-error': errorMessages.firstname }"
                            value="<?= $escaper->escapeHtmlAttr($block->getFormData()->getFirstname()) ?>"
                            autocomplete="given-name"
                            required
                            @input="clearError('firstname')"
                        />
                        <p class="text-error" x-show="errorMessages.firstname" x-text="errorMessages.firstname"></p>
                    </div>

                    <div class="mt-3 flex flex-col">
                        <label for="last_name" class="sr-only tracking-widest">
                            <?= __('Last name') ?>
                        </label>
                        <input
                            type="text"
                            name="lastname"
                            id="last_name"
                            placeholder="<?= __('Last name') ?>"
                            class="h-[44px] w-full rounded-[--inputs-radius] border px-5 py-4 border-text-50 contrast-more:border-secondary-700 contrast-more:placeholder-secondary-700"
                            :class="{ 'border-error': errorMessages.lastname }"
                            value="<?= $escaper->escapeHtmlAttr($block->getFormData()->getLastname()) ?>"
                            autocomplete="family-name"
                            required
                            @input="clearError('lastname')"
                        />
                        <p class="text-error" x-show="errorMessages.lastname" x-text="errorMessages.lastname"></p>
                    </div>

                    <div class="mt-3 flex flex-col">
                        <label for="email_address" class="sr-only tracking-widest">
                            <?= __('Email') ?>
                        </label>
                        <input
                            type="email"
                            name="email"
                            id="email_address"
                            placeholder="<?= __('Email') ?>"
                            class="h-[44px] w-full rounded-[--inputs-radius] border px-5 py-4 border-text-50 contrast-more:border-secondary-700 contrast-more:placeholder-secondary-700"
                            :class="{ 'border-error': errorMessages.email }"
                            value="<?= $escaper->escapeHtmlAttr($block->getFormData()->getEmail()) ?>"
                            autocomplete="email"
                            required
                            @input="clearError('email')"
                        />
                        <p class="text-error" x-show="errorMessages.email" x-text="errorMessages.email"></p>
                    </div>

                    <div class="mt-3 flex flex-col">
                        <label for="password" class="sr-only tracking-widest">
                            <?= __('Password') ?>
                        </label>
                        <input
                            type="password"
                            name="password"
                            id="password"
                            placeholder="<?= __('Password') ?>"
                            class="h-[44px] w-full rounded-[--inputs-radius] border px-5 py-4 border-text-50 contrast-more:border-secondary-700 contrast-more:placeholder-secondary-700"
                            :class="{ 'border-error': errorMessages.password }"
                            required
                            data-validate='{"password-strength": {"minCharacterSets": <?= (int)$passwordMinCharacterSets ?>}}'
                            autocomplete="<?= $isAutocompleteEnabled ? 'new-password' : 'off' ?>"
                            @input="clearError('password')"
                        />
                        <p class="text-error" x-show="errorMessages.password" x-text="errorMessages.password"></p>
                    </div>

                    <button class="mt-7 w-full rounded-[--buttons-radius] bg-primary-bg px-6 py-4 text-white">
                        <?= __('Create') ?>
                    </button>

                    <div class="mt-6 text-center text-sm tracking-wider">
                        <a href="<?= $escaper->escapeUrl($block->getBackUrl()) ?>"
                           class="text-md underline contrast-more:text-secondary-700">
                            <?= __('Back to login') ?>
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    function initForm() {
        return {
            errors: 0,
            errorMessages: {},
            clearError(field) {
                this.errorMessages[field] = '';
            },
            setErrorMessages(messages) {
                this.errorMessages = messages;
            },
            submitForm() {
                this.errors = 0;
                this.errorMessages = {};

                // Custom form validation logic here
                // Example:
                // if (!this.firstname) {
                //     this.errors++;
                //     this.errorMessages.firstname = 'First name is required.';
                // }

                this.validate()
                    .then(() => {
                        const $form = document.querySelector('#<?= $escaper->escapeJs($formId) ?>');
                        <?= $recaptcha ? $recaptcha->getValidationJsHtml(ReCaptcha::RECAPTCHA_FORM_ID_CUSTOMER_CREATE) : '' ?>

                        if (this.errors === 0) {
                            $form.submit();
                        }
                    })
                    .catch((invalid) => {
                        if (invalid.length > 0) {
                            invalid[0].focus();
                        }
                    });
            },
        };
    }
</script>
