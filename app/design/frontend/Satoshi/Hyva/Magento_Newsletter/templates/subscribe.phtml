<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\HeroiconsOutline;
use Hyva\Theme\ViewModel\ReCaptcha;
use Magento\Framework\Escaper;
use Magento\Newsletter\Block\Subscribe;
use Hyva\Theme\ViewModel\SvgIcons;

/** @var Subscribe $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */
/** @var ReCaptcha $recaptcha */
/** @var HeroiconsOutline $heroicons */
/** @var SvgIcons $hyvaicons */

$heroicons = $viewModels->require(HeroiconsOutline::class);

// Do not replace this with $viewModels->require(ReCaptcha::class); that might break the dependency
// on the Magento_ReCaptchaNewsletter module
$recaptcha = $block->getData('viewModelRecaptcha');

$hyvaicons = $viewModels->require(SvgIcons::class);
?>

<div class="flex flex-col items-stretch gap-5 rounded-md border-1 border-transparent bg-secondary-500 px-5 py-6 md:min-w-[35%] md:gap-4 md:bg-bg-500 md:p-7">
    <h2 class="text-lg"><?= $escaper->escapeHtml(__('Join Our Newsletter.')) ?></h2>
    <form
        class="flex flex-col gap-3 items-stretch md:gap-4"
        action="<?= $escaper->escapeUrl($block->getFormActionUrl()) ?>"
        method="post"
        x-data="initNewsletterForm()"
        @submit.prevent="submitForm()"
        id="newsletter-validate-detail"
        aria-label="<?= $escaper->escapeHtmlAttr(__('Subscribe to Newsletter')) ?>"
    >
        <div>
            <label for="newsletter-subscribe" class="sr-only tracking-widest"><?= $escaper->escapeHtml(__('Email address')) ?></label>
            <input
                autocomplete="email"
                autocorrect="off"
                autocapitalize="off"
                id="newsletter-subscribe"
                type="email"
                name="email"
                class="input__field input__field--outline bg-bg-500 md:px-5 md:py-4"
                :class="{
                    'border-error': formSubmissionErrorMessages.email
                }"
                placeholder="<?= $escaper->escapeHtmlAttr(__('Email address')) ?>"
                aria-required="true"
                required
                :autofocus="!!formSubmissionErrorMessages.email"
                :aria-invalid="!!formSubmissionErrorMessages.email"
                :aria-describedby="formSubmissionErrorMessages.email ? 'error_newsletter' : formSubmissionSuccessMessage ? 'success_newsletter' : undefined"
            >
            <span
                id="error_newsletter"
                class="text-error"
                x-show="formSubmissionErrorMessages.email"
                x-cloak
            >
                <?= $hyvaicons->renderHtml('error'); ?>
                <span x-html="formSubmissionErrorMessages.email"></span>
            </span>
            <span
                class="text-error"
                x-show="displayErrorMessage"
                x-cloak
            >
                <?= $hyvaicons->renderHtml('error'); ?>
                <template x-for="errorMessage in errorMessages">
                    <span x-html="errorMessage"></span>
                </template>
            </span>
        </div>

        <?= $block->getBlockHtml('formkey') ?>
        <?= $recaptcha ? $recaptcha->getInputHtml(ReCaptcha::RECAPTCHA_FORM_ID_NEWSLETTER) : '' ?>
        <button
            type="submit"
            class="button button--filled-primary w-full"
            :class="{
                'button--disabled': isLoading
            }"
            :disabled="isLoading"
        >
            <?= $escaper->escapeHtml(__('Subscribe')) ?>
        </button>
        <span
            class="newsletter-form__message newsletter-form__message--success form__message"
            id="success_newsletter"
            tabindex="-1"
            autofocus
            x-show="formSubmissionSuccessMessage"
            x-cloak
        >
            <?= $hyvaicons->renderHtml('success', 'inline'); ?>
            <span x-html="formSubmissionSuccessMessage"></span>
        </span>
        <div class="mt-3 text-sm">
            <?= $recaptcha ? $recaptcha->getLegalNoticeHtml(ReCaptcha::RECAPTCHA_FORM_ID_NEWSLETTER) : '' ?>
        </div>
    </form>
    <script>
        function initNewsletterForm() {
            return {
                isLoading: false,
                formSubmissionErrorMessages: {},
                formSubmissionSuccessMessage: '',
                errors: 0,
                hasCaptchaToken: 0,
                displayErrorMessage: false,
                errorMessages: [],
                setErrorMessages(messages) {
                    this.errorMessages = [messages]
                    this.displayErrorMessage = this.errorMessages.length
                },
                clearFormSubmissionMessages() {
                    this.formSubmissionErrorMessages = {};
                    this.formSubmissionSuccessMessage = '';
                },
                submitForm() {
                    // Do not rename $form, the variable is expected to be declared in the recaptcha output
                    const $form = document.querySelector('#newsletter-validate-detail');
                    <?= $recaptcha ? $recaptcha->getValidationJsHtml(ReCaptcha::RECAPTCHA_FORM_ID_NEWSLETTER) : '' ?>

                    if (this.errors === 0) {
                        this.isLoading = true;
                        this.clearFormSubmissionMessages();

                        const isCaptchaEnabled = Boolean(<?= $recaptcha ? $recaptcha->isCaptchaEnabledFor(ReCaptcha::RECAPTCHA_FORM_ID_NEWSLETTER) : '' ?>);
                        const recaptchaSiteKey = '<?= $recaptcha ? $recaptcha->getSiteKey(ReCaptcha::RECAPTCHA_FORM_ID_NEWSLETTER) : '' ?>';
                        const recaptchaFormIdNewsletter = '<?= ReCaptcha::RECAPTCHA_FORM_ID_NEWSLETTER ?>';
                        const recaptchaType = '<?= $recaptcha ? $recaptcha->getSelectedTypeForForm(ReCaptcha::RECAPTCHA_FORM_ID_NEWSLETTER) : '' ?>';
                        const formData = new FormData($form);

                        if (isCaptchaEnabled) {
                            // Recaptcha v3
                            if (recaptchaType === 'recaptcha_v3') {
                                grecaptcha.ready(() => {
                                    grecaptcha.execute(recaptchaSiteKey, {action: recaptchaFormIdNewsletter})
                                        .then((token) => {
                                            if (formData.has('g-recaptcha-response')) {
                                                formData.delete('g-recaptcha-response');
                                            }
                                            formData.append('g-recaptcha-response', token);
                                            this.subscribe(formData);
                                        })
                                        .catch(() => {
                                            this.isLoading = false;
                                        });
                                });
                            }
                            // Recaptcha v2 checkbox
                            else if (recaptchaType === 'recaptcha') {
                                const recaptchaResponse = document.querySelector('#grecaptcha-container-Newsletter .g-recaptcha-response').value;
                                if (formData.has('g-recaptcha-response')) {
                                    formData.delete('g-recaptcha-response');
                                }
                                formData.append('g-recaptcha-response', recaptchaResponse);
                                this.subscribe(formData);
                                grecaptcha.reset();
                            }
                            // Recaptcha v2 invisible
                            else if (recaptchaType === 'invisible') {
                                // TODO: Recaptcha v2 invisible has a challenge when re-generating token
                            }
                        } else {
                            this.subscribe(formData);
                        }
                    }
                },
                subscribe(formData) {
                    const $form = document.querySelector('#newsletter-validate-detail');
                    fetch($form.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            this.formSubmissionSuccessMessage = data.message;
                        } else {
                            this.formSubmissionErrorMessages[data.field] = data.message;
                        }
                    })
                    .catch(() => {
                        this.formSubmissionErrorMessages['email'] = '<?= __('Something went wrong with the subscription.') ?>';
                    })
                    .finally(() => {
                        this.isLoading = false;
                    });
                }
            }
        }
    </script>
</div>
