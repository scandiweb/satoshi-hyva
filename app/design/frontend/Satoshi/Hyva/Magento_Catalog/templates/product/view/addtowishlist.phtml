<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\CurrentProduct;
use Hyva\Theme\ViewModel\HeroiconsSolid;
use Hyva\Theme\ViewModel\Wishlist;
use Magento\Catalog\Model\Product;
use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Hyva\Theme\ViewModel\SvgIcons;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */

/** @var Wishlist $wishlistViewModel */
$wishlistViewModel = $viewModels->require(Wishlist::class);

/** @var HeroiconsSolid $heroicons */
$heroicons = $viewModels->require(HeroiconsSolid::class);

/** @var CurrentProduct $currentProduct */
$currentProduct = $viewModels->require(CurrentProduct::class);

/** @var Product $product */
$product = $currentProduct->get();

/** @var SvgIcons $hyvaicons */
$hyvaicons = $viewModels->require(SvgIcons::class);


if (!$product->getId() || !$wishlistViewModel->isEnabled()) {
    return;
}
/**
 * When visiting wishlist/index/configure, the current class is Magento\Wishlist\Block\Item\Configure
 * In that case we take the form parameters from the existing wishlist item
 */
$updateParams = $block->getUpdateParams() ?: null;
$uniqueId = '_' . uniqid();
?>
<script>
    function initWishlist<?= /** @noEscape */ $uniqueId ?>() {
        return {
            currentWishListItem: {},
            init() {
                setTimeout(() => {
                    const productSku = '<?php echo $product->getSku(); ?>';
                    this.currentWishListItem = this.$store.wishlist.wishlistItems.find(
                        item => item.product_sku === productSku
                    );
                }, 0);

                this.$watch("selectedAttributes", () => {
                    const wishlistItems = this.$store.wishlist.wishlistItems;
                    const selectedAttributes = this.selectedAttributes;
                    this.currentWishListItem =
                        wishlistItems.find(item => {
                            const matchingOptions = item.options.filter(option =>
                                selectedAttributes.some(attr =>
                                    option.option_id === attr.attributeId && option.option_value === attr.value
                                )
                            );
                            return (
                                matchingOptions.length === selectedAttributes.length &&
                                matchingOptions.length === item.options.length
                            );
                        }) || {};
                });


            },
            addToWishlist(productId) {
                const postParams = <?php if ($updateParams): ?>
                    <?= /* @noEscape */ $updateParams ?>
                <?php else: ?>
                {
                    action: BASE_URL + "wishlist/index/add/",
                        data
                :
                    {
                        product: productId,
                            uenc
                    :
                        hyva.getUenc()
                    }
                }
                <?php endif; ?>

                postParams.data['form_key'] = hyva.getFormKey();
                postParams.data['qty'] = document.getElementById(`qty[${productId}]`)
                    ? document.getElementById(`qty[${productId}]`).value || 1
                    : 1;

                let postData = Object.keys(postParams.data).map(key => {
                    return `${key}=${postParams.data[key]}`;
                }).join('&');

                // take the all the input fields that configure this product
                // includes custom, configurable, grouped and bundled options
                Array.from(document.querySelectorAll(
                    '[name^=options], [name^=super_attribute], [name^=bundle_option], [name^=super_group], [name^=links]')
                ).map(input => {
                    if (input.type === "select-multiple") {
                        Array.from(input.selectedOptions).forEach(option => {
                            postData += `&${input.name}=${option.value}`
                        })
                    } else {
                        // skip "checkable inputs" that are not checked
                        if (!(['radio', 'checkbox', 'select'].includes(input.type) && !input.checked)) {
                            postData += `&${input.name}=${input.value}`
                        }
                    }
                });
                fetch(postParams.action, {
                    "headers": {
                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                    },
                    "body": postData,
                    "method": "POST",
                    "mode": "cors",
                    "credentials": "include"
                }).then((response) => {
                    if (response.redirected && response.url.includes('/customer/account/login')) {
                        window.location.href = response.url;
                    } else if (response.ok) {
                        return response.json();
                    } else {
                        typeof window.dispatchMessages !== "undefined" && window.dispatchMessages(
                            [{
                                type: "warning",
                                text: "<?= $escaper->escapeHtml(__('Could not add item to wishlist.')) ?>"
                            }], 5000
                        );
                    }
                }).then((response) => {
                    if (!response) {
                        return;
                    }
                    this.currentWishListItem = response.item;
                    this.$store.wishlist.setWishlistItems([response.item, ...this.$store.wishlist.wishlistItems]);
                    this.$store.wishlist.showWishlist();
                }).catch((error) => {
                    typeof window.dispatchMessages !== "undefined" && window.dispatchMessages(
                        [{
                            type: "error",
                            text: error
                        }], 5000
                    );
                });
            },
            removeFromWishlist() {
                const itemId = this.currentWishListItem['item_id'];

                fetch(`${BASE_URL}/wishlist/index/remove`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({
                        item: itemId,
                        form_key: hyva.getFormKey(),
                        uenc: hyva.getUenc(),
                    }),
                    mode: "cors",
                    credentials: "include",
                })
                    .then(response => {
                        if (response.ok) {
                            const updatedWishlistItems = this.$store.wishlist.wishlistItems.filter(item => item.item_id !== this.currentWishListItem.item_id);
                            this.$store.wishlist.setWishlistItems(updatedWishlistItems);
                            this.$store.wishlist.showWishlist();
                            this.currentWishListItem = {};
                            console.log('Item removed from wishlist');
                        } else {
                            return response.text().then(text => {
                                throw new Error(text);
                            });
                        }
                    })
                    .catch(error => {
                        console.log('Error removing item from wishlist:', error);
                    });

            }
        }
    }
</script>

<button x-data="initWishlist<?= /** @noEscape */
$uniqueId ?>()"
        @click.prevent="!currentWishListItem || !Object.keys(currentWishListItem).length ? addToWishlist(<?= (int)$product->getId() ?>) : removeFromWishlist()"
        title="<?= $escaper->escapeHtmlAttr(
            ($updateParams) ? __('Update Wish List') : __('Add to Wish List')
        ) ?>"
        aria-label="<?= $escaper->escapeHtmlAttr(
            ($updateParams) ? __('Update Wish List') : __('Add to Wish List')
        ) ?>"
        id="add-to-wishlist"
        data-addto="wishlist"
>
    <span x-show="!currentWishListItem || !Object.keys(currentWishListItem).length">
        <?= $hyvaicons->renderHtml('wishlist-plus', 'text-3xl'); ?>
    </span>
    <span x-show="Object.keys(currentWishListItem).length">
        <?= $hyvaicons->renderHtml('wishlist-minus', 'text-3xl'); ?>
    </span>

</button>
