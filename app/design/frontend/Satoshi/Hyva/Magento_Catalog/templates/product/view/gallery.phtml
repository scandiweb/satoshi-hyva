<?php

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\StoreConfig;
use Hyva\Theme\ViewModel\HeroiconsSolid;
use Magento\Catalog\Block\Product\View\Gallery;
use Magento\Framework\Escaper;

/** @var Escaper $escaper */
/** @var Gallery $block */
/** @var ViewModelRegistry $viewModels */

/** @var StoreConfig $storeConfig */
$storeConfig = $viewModels->require(StoreConfig::class);

/** @var HeroiconsSolid $heroiconsSolid */
$heroiconsSolid = $viewModels->require(HeroiconsSolid::class);

$productName = $block->getProduct()->getName();
$images = json_decode($block->getGalleryImagesJson(), true);
?>

<div
    id="gallery"
    x-data="initGallery()"
    class="flex w-full flex-col gap-4 md:grid md:grid-cols-[repeat(auto-fit,1fr)] md:gap-5 md:pb-7 lg:grid-cols-[repeat(auto-fit,minmax(300px,1fr))] max-md:-mt-8"
>
    <?php foreach ($images as $index => $image): ?>
        <div
            class="bg-white animate-on-transition relative flex-shrink-0 overflow-hidden border-black rounded-xl">
            <div class="aspect-product w-full object-cover object-center">
                <img
                    alt="<?= $escaper->escapeHtmlAttr($image['caption'] ?? $productName) ?>"
                    title="<?= $escaper->escapeHtmlAttr($image['caption'] ?? $productName) ?>"
                    class="absolute inset-0 object-contain object-center w-full m-auto max-h-screen-75"
                    loading="lazy"
                    src="<?= $image['img'] ?>"
                />
                <?php if ($image['type'] === 'video' && !in_array($index, $playingVideoIndexes ?? [])): ?>
                    <button
                        type="button"
                        class="group absolute inset-0 outline-offset-2 grid place-items-center"
                        aria-label="<?= $escaper->escapeHtmlAttr(__('Play video')) ?>"
                        @click="activateVideo(<?= $index ?>)"
                    >
                        <?= $heroiconsSolid->playHtml(
                            'stroke-white/75 fill-black/20 transition ease-in group-hover:scale-110 md:w-24 md:h-24',
                            44,
                            44,
                            ['aria-hidden' => 'true']
                        ); ?>
                    </button>
                <?php endif; ?>
                <?php if ($image['type'] === 'video'): ?>
                    <div class="absolute inset-0 hidden w-full h-full bg-black nonmobile"
                         :class="{ 'hidden': activeVideoType !== 'youtube' }"
                         x-transition.opacity.duration.500ms
                         x-show="activeVideoType === 'youtube' && playingVideoIndexes.includes(<?= $index ?>)"
                    >
                        <div id="youtube-player-<?= $index ?>" class="w-full h-full"></div>
                    </div>
                    <div class="absolute inset-0 hidden w-full h-full bg-white"
                         :class="{ 'hidden': activeVideoType !== 'vimeo' }"
                         x-transition.opacity.duration.500ms
                         x-show="activeVideoType === 'vimeo'"
                    >
                        <div id="vimeo-player-<?= $index ?>" class="w-full h-full"></div>
                    </div>
                <?php endif; ?>
            </div>
        </div>
    <?php endforeach; ?>
</div>

<script>
    function initGallery() {
        return {
            activeVideoType: false,
            playingVideoIndexes: [],
            images: <?= $block->getGalleryImagesJson() ?>,

            activateVideo(index) {
                const videoData = this.getVideoData(index);

                if (!videoData) {
                    return;
                }

                this.activeVideoType = videoData.type;
                this.playingVideoIndexes.push(index);

                if (videoData.type === "youtube") {
                    this.initYoutubeAPI(videoData, index);
                } else if (videoData.type === "vimeo") {
                    this.initVimeoVideo(videoData, index);
                }
            },
            getVideoData(index) {
                const videoUrl = this.images[index] && this.images[index].videoUrl;

                if (!videoUrl) {
                    return;
                }

                let id, type, youtubeRegex, vimeoRegex, useYoutubeNoCookie = false;

                if (videoUrl.match(/youtube\.com|youtu\.be|youtube-nocookie.com/)) {
                    id = videoUrl.replace(/^\/(embed\/|v\/)?/, '').replace(/\/.*/, '');
                    type = 'youtube';

                    youtubeRegex = /^.*(?:(?:youtu\.be\/|v\/|vi\/|u\/\w\/|embed\/)|(?:(?:watch)?\?v(?:i)?=|\&v(?:i)?=))([^#\&\?]*).*/;
                    id = videoUrl.match(youtubeRegex)[1];

                    if (videoUrl.match(/youtube-nocookie.com/)) {
                        useYoutubeNoCookie = true;
                    }
                } else if (videoUrl.match(/vimeo\.com/)) {
                    type = 'vimeo';
                    vimeoRegex = new RegExp(['https?:\\/\\/(?:www\\.|player\\.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)',
                        '?|groups\\/([^\\/]*)\\/videos\\/|album\\/(\\d+)\\/video\\/|video\\/|)(\\d+)(?:$|\\/|\\?)'
                    ].join(''));
                    id = videoUrl.match(vimeoRegex)[3];
                }

                return id ? {
                    id: id, type: type, useYoutubeNoCookie: useYoutubeNoCookie
                } : false;
            },
            initYoutubeAPI(videoData, index) {
                if (!window.YT) {
                    const loadYoutubeAPI = document.createElement('script');
                    loadYoutubeAPI.src = 'https://www.youtube.com/iframe_api';
                    loadYoutubeAPI.id = 'loadYoutubeAPI';
                    const firstScriptTag = document.getElementsByTagName('script')[0];
                    firstScriptTag.parentNode.insertBefore(loadYoutubeAPI, firstScriptTag);
                }

                const initializePlayer = () => {
                    const params = {
                        "autoplay": true
                    };

                    const host = videoData.useYoutubeNoCookie ?
                        'https://www.youtube-nocookie.com' :
                        'https://www.youtube.com';

                    if (!this.relatedVideos) {
                        params.rel = 0;
                    }

                    window[`youtubePlayer${index}`] = new YT.Player(`youtube-player-${index}`, {
                        host: host,
                        videoId: videoData.id,
                        playerVars: params
                    });
                };

                if (window.YT && window.YT.Player) {
                    initializePlayer();
                } else {
                    const previousOnYouTubeIframeAPIReady = window.onYouTubeIframeAPIReady;
                    window.onYouTubeIframeAPIReady = function () {
                        if (previousOnYouTubeIframeAPIReady) {
                            previousOnYouTubeIframeAPIReady();
                        }
                        initializePlayer();
                    };
                }
            },

            initVimeoVideo(videoData, index) {
                let additionalParams = '&autoplay=1';
                let src = '';

                const timestamp = new Date().getTime();
                const vimeoContainer = document.getElementById(`vimeo-player-${index}`);
                const videoId = videoData.id;

                if (!vimeoContainer || !videoId) return;

                if (this.loopVideo) {
                    additionalParams += '&loop=1';
                }
                src = 'https://player.vimeo.com/video/' +
                    videoId + '?api=1&player_id=vimeo' +
                    videoId +
                    timestamp +
                    additionalParams;
                vimeoContainer.innerHTML =
                    `<iframe id="${'vimeo' + videoId + timestamp}"
                        src="${src}"
                        width="640" height="360"
                        webkitallowfullscreen
                        mozallowfullscreen
                        allowfullscreen
                        referrerPolicy="origin"
                        allow="autoplay"
                        class="object-center w-full h-full object-fit"
                     ></iframe>`;

                this.vimeoPlayer = vimeoContainer.childNodes[0];
            },
        }
    }
</script>
